
class PID {
  public:
    PID(float kp, float ki, float kd, float sampleTime) :
      Kp(kp), Ki(ki), Kd(kd), sampleTime(sampleTime) {
      previousError = 0;
      integral = 0;
    }

    void setTarget(float target) {
      this->target = target;
    }

    float compute(float currentValue) {
      float error = target - currentValue;
      integral += error * sampleTime;
      float derivative = (error - previousError) / sampleTime;
      
      float output = Kp * error + Ki * integral + Kd * derivative;

      previousError = error;
      return output;
    }

  private:
    float Kp, Ki, Kd;
    float target;
    float previousError;
    float integral;
    float sampleTime;
};

float smooth(float current, float previous, float alpha) {
  return alpha * current + (1 - alpha) * previous;
}


const int motorPin = 5; 
const int encoderPin = 4; 

PID pid(2.0, 5.0, 1.0, 0.1); 
float smoothedOutput = 0;
const float smoothingAlpha = 0.1; 

void setup() {
  pinMode(motorPin, OUTPUT);
  pinMode(encoderPin, INPUT);
  pid.setTarget(100); 
}

void loop() {
  
  int encoderValue = digitalRead(encoderPin);
  float currentSpeed = (encoderValue == HIGH) ? 255 : 0; 
  float pidOutput = pid.compute(currentSpeed);
  
  smoothedOutput = smooth(pidOutput, smoothedOutput, smoothingAlpha);
  
 
  analogWrite(motorPin, constrain(smoothedOutput, 0, 255));
  
  delay(100); 
}
